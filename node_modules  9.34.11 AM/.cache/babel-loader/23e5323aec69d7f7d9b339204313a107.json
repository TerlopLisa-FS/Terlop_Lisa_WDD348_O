{"ast":null,"code":"var _jsxFileName = \"/Users/lisaterlop/Desktop/Terlop_Lisa_WDD348_O/src/pages/YuGiOh.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport AnimeImg from '../images/anime_collection.png';\nimport Card from '../components/Card';\nimport cardBack from '../images/card-back.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction YuGiOH(props) {\n  _s();\n\n  // Setting state to true, this will determine which component set is loaded. Either from a specific search or a random card.\n  const [toggle, setToggle] = useState(true); // Setting up our state and leaving it empty when we load the page.\n\n  const [randomCardDetails, setRandomCardDetails] = useState({\n    name: 'Card Info',\n    card_images: [{\n      image_url: cardBack\n    }],\n    desc: 'N/A',\n    type: 'N/A',\n    atk: 'N/A',\n    def: 'N/A',\n    attribute: 'N/A',\n    level: 'N/A',\n    race: 'N/A'\n  }); // Using fetch, async, and await to get our API information. We are calling the function below.\n\n  useEffect(() => {\n    // This function will run when the user puts in data for the input and hits enter or presses the search button.\n    async function fetchAPI() {\n      let errorMsg = document.querySelector('.errorMsg');\n      let responseForCardDetails;\n      let cardInfo;\n      let apiCallResponse; // We will not call the API if the value is null like it is on the initial page load.\n\n      if (props.url !== null) {\n        // We will use a try catch finally when making a call to the API.\n        try {\n          responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n          apiCallResponse = true;\n        } catch (e) {\n          errorMsg.innerText = 'There is currently an issue with the API, try again later.';\n          apiCallResponse = false; // If there is an error we will set the state of statusCall to false.\n        } finally {\n          // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n          if (apiCallResponse === true) {\n            responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n            const cardJsonData = await responseForCardDetails.json();\n            cardInfo = [];\n            cardInfo = cardJsonData;\n            setRandomCardDetails(cardInfo); // Setting toggle to display searched card.\n\n            setToggle(true);\n          }\n        }\n      }\n    }\n\n    fetchAPI();\n  }, [props.url]); // Stating our dependencies.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      name: randomCardDetails.name,\n      image: randomCardDetails.card_images,\n      type: randomCardDetails.type,\n      description: randomCardDetails.desc,\n      atk: randomCardDetails.atk,\n      def: randomCardDetails.def,\n      starLevel: randomCardDetails.level,\n      attribute: randomCardDetails.attribute,\n      race: randomCardDetails.race,\n      imgAlt: randomCardDetails.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(YuGiOH, \"dG6nz0eS6RzQ4FMxCUx5+LStyzU=\");\n\n_c = YuGiOH;\nexport default YuGiOh;\nconst styles = {\n  container: {\n    alignContent: 'center',\n    padding: '10rem'\n  },\n  img: {\n    height: '30rem',\n    width: '35rem',\n    alignContent: 'center',\n    marginRight: '1rem'\n  },\n  myArticle: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  h3: {\n    textAlign: 'center',\n    marinTop: '1rem'\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"YuGiOH\");","map":{"version":3,"names":["React","useState","useEffect","AnimeImg","Card","cardBack","YuGiOH","props","toggle","setToggle","randomCardDetails","setRandomCardDetails","name","card_images","image_url","desc","type","atk","def","attribute","level","race","fetchAPI","errorMsg","document","querySelector","responseForCardDetails","cardInfo","apiCallResponse","url","fetch","e","innerText","cardJsonData","json","YuGiOh","styles","container","alignContent","padding","img","height","width","marginRight","myArticle","display","flexDirection","h3","textAlign","marinTop"],"sources":["/Users/lisaterlop/Desktop/Terlop_Lisa_WDD348_O/src/pages/YuGiOh.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport AnimeImg from '../images/anime_collection.png';\nimport Card from '../components/Card';\nimport cardBack from '../images/card-back.png';\nfunction YuGiOH (props){\n   \n    // Setting state to true, this will determine which component set is loaded. Either from a specific search or a random card.\n    const [toggle, setToggle] = useState(true);\n\n// Setting up our state and leaving it empty when we load the page.\n    const [randomCardDetails, setRandomCardDetails] = useState({\n        name: 'Card Info',\n        card_images: [{image_url: cardBack}],\n        desc: 'N/A',\n        type: 'N/A',\n        atk: 'N/A',\n        def: 'N/A',\n        attribute: 'N/A',\n        level: 'N/A',\n        race: 'N/A',\n    });\n\n    // Using fetch, async, and await to get our API information. We are calling the function below.\n    useEffect(() => {\n\n        // This function will run when the user puts in data for the input and hits enter or presses the search button.\n        async function fetchAPI() {\n            let errorMsg = document.querySelector('.errorMsg');\n            let responseForCardDetails;\n            let cardInfo;\n            let apiCallResponse;\n\n            // We will not call the API if the value is null like it is on the initial page load.\n            if (props.url !== null) {\n                // We will use a try catch finally when making a call to the API.\n                try {\n                    responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n                    apiCallResponse = true;\n                } catch (e) {\n                    errorMsg.innerText = 'There is currently an issue with the API, try again later.';\n                    apiCallResponse = false; // If there is an error we will set the state of statusCall to false.\n                } finally {\n                    // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n                    if(apiCallResponse === true) {\n\n                        responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n\n                        const cardJsonData = await responseForCardDetails.json();\n                        cardInfo = [];\n\n                        cardInfo = cardJsonData;\n\n                        setRandomCardDetails(cardInfo);\n\n                        // Setting toggle to display searched card.\n                        setToggle(true);\n                    }\n                }\n            }\n        }\n        fetchAPI();\n    }, [ props.url]); // Stating our dependencies.\n\n   \n   return (\n\n    <div className=\"row\">\n        {\n                    <Card\n                    name={randomCardDetails.name}\n                    image={randomCardDetails.card_images}\n                    type={randomCardDetails.type}\n                    description={randomCardDetails.desc}\n                    atk={randomCardDetails.atk}\n                    def={randomCardDetails.def}\n                    starLevel={randomCardDetails.level}\n                    attribute={randomCardDetails.attribute}\n                    race={randomCardDetails.race}\n                    imgAlt={randomCardDetails.name}\n                /> \n        }\n      </div>\n            );\n}\n                \n   \nexport default YuGiOh;\n\nconst styles = {\n  container: {\n    alignContent: 'center',\n    padding: '10rem'\n  },\n  img: {\n    height: '30rem',\n    width: '35rem',\n    alignContent: 'center',\n    marginRight: '1rem'\n       \n  },\n  myArticle: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  h3: {\n    textAlign: 'center',\n    marinTop: '1rem'\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}