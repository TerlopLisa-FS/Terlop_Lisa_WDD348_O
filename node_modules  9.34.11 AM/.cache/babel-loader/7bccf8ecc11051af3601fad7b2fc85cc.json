{"ast":null,"code":"var _jsxFileName = \"/Users/lisaterlop/Desktop/Terlop_Lisa_WDD348_O/src/pages/YuGiOh.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport AnimeImg from '../images/anime_collection.png';\nimport Card from '../components/Card';\nimport cardBack from '../images/card-back.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction YuGiOH(props) {\n  _s();\n\n  // Setting state to true, this will determine which component set is loaded. Either from a specific search or a random card.\n  const [toggle, setToggle] = useState(true); // Setting up our state and leaving it empty when we load the page.\n\n  const [randomCardDetails, setRandomCardDetails] = useState({\n    name: 'Card Info',\n    card_images: [{\n      image_url: cardBack\n    }],\n    desc: 'N/A',\n    type: 'N/A',\n    atk: 'N/A',\n    def: 'N/A',\n    attribute: 'N/A',\n    level: 'N/A',\n    race: 'N/A'\n  }); // Using fetch, async, and await to get our API information. We are calling the function below.\n\n  useEffect(() => {\n    // This function will run when the user puts in data for the input and hits enter or presses the search button.\n    async function fetchAPI() {\n      let errorMsg = document.querySelector('.errorMsg');\n      let responseForCardDetails;\n      let cardInfo;\n      let apiCallResponse; // We will not call the API if the value is null like it is on the initial page load.\n\n      if (props.url !== null) {\n        // We will use a try catch finally when making a call to the API.\n        try {\n          responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n          apiCallResponse = true;\n        } catch (e) {\n          errorMsg.innerText = 'There is currently an issue with the API, try again later.';\n          apiCallResponse = false; // If there is an error we will set the state of statusCall to false.\n        } finally {\n          // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n          if (apiCallResponse === true) {\n            responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n            const cardJsonData = await responseForCardDetails.json();\n            cardInfo = [];\n            cardInfo = cardJsonData;\n            setCardDetails(cardInfo); // Saving info to our history\n\n            let searchHistoryList = searchHistory;\n            let cardExist = false;\n            /*\n            If the card exists in our search history we will remove it from the array and put it at the beginning.\n            We will then update out local storage.\n             */\n\n            for (let i = 0; i < searchHistoryList.length; i++) {\n              if (cardInfo.data[0].name === searchHistoryList[i].cardName) {\n                cardExist = true;\n                searchHistoryList.splice(i, 1);\n                searchHistoryList.unshift({\n                  cardName: cardInfo.data[0].name,\n                  cardImg: cardInfo.data[0].card_images[0].image_url\n                });\n                window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n              }\n            } // If the card does not exist in our search history we will then add it to our search history.\n\n\n            if (cardExist === false) {\n              searchHistoryList.unshift({\n                cardName: cardInfo.data[0].name,\n                cardImg: cardInfo.data[0].card_images[0].image_url\n              });\n              setSearchHistory(searchHistoryList);\n              /*\n              As we don't want our search history to be too long we will only ensure we have a max of 6 items,\n              so we will remove the last item in the array when a new one is added.\n              */\n\n              if (searchHistoryList.length > 6) {\n                while (searchHistoryList.length > 6) {\n                  searchHistoryList.pop();\n                }\n              } // We will then update out local storage.\n\n\n              window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n            } // Setting toggle to display searched card.\n\n\n            setToggle(true);\n          }\n        }\n      }\n    }\n\n    fetchAPI();\n  }, [urlForCardDetails, props.url, searchHistory]); // Stating our dependencies.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      name: items.name,\n      image: items.card_images,\n      type: items.type,\n      description: items.desc,\n      atk: items.atk,\n      def: items.def,\n      starLevel: items.level,\n      attribute: items.attribute,\n      race: items.race,\n      imgAlt: items.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n}\n\n_s(YuGiOH, \"dG6nz0eS6RzQ4FMxCUx5+LStyzU=\");\n\n_c = YuGiOH;\nexport default YuGiOh;\nconst styles = {\n  container: {\n    alignContent: 'center',\n    padding: '10rem'\n  },\n  img: {\n    height: '30rem',\n    width: '35rem',\n    alignContent: 'center',\n    marginRight: '1rem'\n  },\n  myArticle: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  h3: {\n    textAlign: 'center',\n    marinTop: '1rem'\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"YuGiOH\");","map":{"version":3,"names":["React","useState","AnimeImg","Card","cardBack","YuGiOH","props","toggle","setToggle","randomCardDetails","setRandomCardDetails","name","card_images","image_url","desc","type","atk","def","attribute","level","race","useEffect","fetchAPI","errorMsg","document","querySelector","responseForCardDetails","cardInfo","apiCallResponse","url","fetch","e","innerText","cardJsonData","json","setCardDetails","searchHistoryList","searchHistory","cardExist","i","length","data","cardName","splice","unshift","cardImg","window","localStorage","setItem","JSON","stringify","setSearchHistory","pop","urlForCardDetails","items","YuGiOh","styles","container","alignContent","padding","img","height","width","marginRight","myArticle","display","flexDirection","h3","textAlign","marinTop"],"sources":["/Users/lisaterlop/Desktop/Terlop_Lisa_WDD348_O/src/pages/YuGiOh.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport AnimeImg from '../images/anime_collection.png';\nimport Card from '../components/Card';\nimport cardBack from '../images/card-back.png';\nfunction YuGiOH (props){\n   \n    // Setting state to true, this will determine which component set is loaded. Either from a specific search or a random card.\n    const [toggle, setToggle] = useState(true);\n\n// Setting up our state and leaving it empty when we load the page.\n    const [randomCardDetails, setRandomCardDetails] = useState({\n        name: 'Card Info',\n        card_images: [{image_url: cardBack}],\n        desc: 'N/A',\n        type: 'N/A',\n        atk: 'N/A',\n        def: 'N/A',\n        attribute: 'N/A',\n        level: 'N/A',\n        race: 'N/A',\n    });\n\n    // Using fetch, async, and await to get our API information. We are calling the function below.\n    useEffect(() => {\n\n        // This function will run when the user puts in data for the input and hits enter or presses the search button.\n        async function fetchAPI() {\n            let errorMsg = document.querySelector('.errorMsg');\n            let responseForCardDetails;\n            let cardInfo;\n            let apiCallResponse;\n\n            // We will not call the API if the value is null like it is on the initial page load.\n            if (props.url !== null) {\n                // We will use a try catch finally when making a call to the API.\n                try {\n                    responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n                    apiCallResponse = true;\n                } catch (e) {\n                    errorMsg.innerText = 'There is currently an issue with the API, try again later.';\n                    apiCallResponse = false; // If there is an error we will set the state of statusCall to false.\n                } finally {\n                    // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n                    if(apiCallResponse === true) {\n\n                        responseForCardDetails = await fetch(\"https://db.ygoprodeck.com/api/v7/cardinfo.php\");\n\n                        const cardJsonData = await responseForCardDetails.json();\n                        cardInfo = [];\n\n                        cardInfo = cardJsonData;\n\n                        setCardDetails(cardInfo);\n\n                        // Saving info to our history\n                        let searchHistoryList = searchHistory;\n\n                        let cardExist = false;\n\n                        /*\n                        If the card exists in our search history we will remove it from the array and put it at the beginning.\n                        We will then update out local storage.\n                         */\n                        for (let i = 0; i < searchHistoryList.length; i++) {\n                            if (cardInfo.data[0].name === searchHistoryList[i].cardName) {\n                                cardExist = true;\n                                searchHistoryList.splice(i, 1);\n                                searchHistoryList.unshift({cardName: cardInfo.data[0].name, cardImg: cardInfo.data[0].card_images[0].image_url});\n                                window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                            }\n                        }\n\n                        // If the card does not exist in our search history we will then add it to our search history.\n                        if (cardExist === false) {\n                            searchHistoryList.unshift({cardName: cardInfo.data[0].name, cardImg: cardInfo.data[0].card_images[0].image_url});\n                            setSearchHistory(searchHistoryList);\n\n                            /*\n                            As we don't want our search history to be too long we will only ensure we have a max of 6 items,\n                            so we will remove the last item in the array when a new one is added.\n                            */\n                            if (searchHistoryList.length > 6) {\n                                while (searchHistoryList.length > 6) {\n                                    searchHistoryList.pop();\n                                }\n                            }\n\n                            // We will then update out local storage.\n                            window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                        }\n\n                        // Setting toggle to display searched card.\n                        setToggle(true);\n                    }\n                }\n            }\n        }\n        fetchAPI();\n    }, [urlForCardDetails, props.url, searchHistory]); // Stating our dependencies.\n\n   \n   return (\n\n    <div className=\"row\">\n        {\n                    <Card\n                    name={items.name}\n                    image={items.card_images}\n                    type={items.type}\n                    description={items.desc}\n                    atk={items.atk}\n                    def={items.def}\n                    starLevel={items.level}\n                    attribute={items.attribute}\n                    race={items.race}\n                    imgAlt={items.name}\n                /> \n        }\n      </div>\n            );\n}\n                \n   \nexport default YuGiOh;\n\nconst styles = {\n  container: {\n    alignContent: 'center',\n    padding: '10rem'\n  },\n  img: {\n    height: '30rem',\n    width: '35rem',\n    alignContent: 'center',\n    marginRight: '1rem'\n       \n  },\n  myArticle: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  h3: {\n    textAlign: 'center',\n    marinTop: '1rem'\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}