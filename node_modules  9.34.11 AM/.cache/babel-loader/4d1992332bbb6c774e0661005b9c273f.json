{"ast":null,"code":"var _jsxFileName = \"/Users/lisaterlop/Desktop/Terlop_Lisa_WDD348_O/src/pages/Pokemon.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Pokemon(props) {\n  _s();\n\n  // Setting state to true, this will determine which component set is loaded. Either from a specific search or a random card.\n  const [toggle, setToggle] = useState(true); // Setting up our state and leaving it empty when we load the page.\n\n  const [randomCardDetails, setRandomCardDetails] = useState({\n    name: 'Card Info',\n    card_images: [{\n      image_url: cardBack\n    }],\n    desc: 'N/A',\n    type: 'N/A',\n    atk: 'N/A',\n    def: 'N/A',\n    attribute: 'N/A',\n    level: 'N/A',\n    race: 'N/A'\n  }); // Setting the url for our API call based on the props being passed in from Search.js.\n\n  let urlForCardDetails = `https://db.ygoprodeck.com/api/v7/cardinfo.php?name=${props.url}`;\n  useEffect(() => {\n    async function fetchAPI() {\n      let errorMsg = document.querySelector('.errorMsg');\n      let responseForCardDetails;\n      let cardInfo;\n      let apiCallResponse; // We will not call the API if the value is null like it is on the initial page load.\n\n      if (props.url !== null) {\n        // We will use a try catch finally when making a call to the API.\n        try {\n          responseForCardDetails = await fetch(urlForCardDetails);\n          apiCallResponse = true;\n        } catch (e) {\n          errorMsg.innerText = 'There is currently an issue with the API, try again later.';\n          apiCallResponse = false; // If there is an error we will set the state of statusCall to false.\n        } finally {\n          // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n          if (apiCallResponse === true) {\n            responseForCardDetails = await fetch(urlForCardDetails);\n            const cardJsonData = await responseForCardDetails.json();\n            cardInfo = [];\n            cardInfo = cardJsonData;\n            setCardDetails(cardInfo); // Saving info to our history\n\n            let searchHistoryList = searchHistory;\n            let cardExist = false;\n            /*\n            If the card exists in our search history we will remove it from the array and put it at the beginning.\n            We will then update out local storage.\n             */\n\n            for (let i = 0; i < searchHistoryList.length; i++) {\n              if (cardInfo.data[0].name === searchHistoryList[i].cardName) {\n                cardExist = true;\n                searchHistoryList.splice(i, 1);\n                searchHistoryList.unshift({\n                  cardName: cardInfo.data[0].name,\n                  cardImg: cardInfo.data[0].card_images[0].image_url\n                });\n                window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n              }\n            } // If the card does not exist in our search history we will then add it to our search history.\n\n\n            if (cardExist === false) {\n              searchHistoryList.unshift({\n                cardName: cardInfo.data[0].name,\n                cardImg: cardInfo.data[0].card_images[0].image_url\n              });\n              setSearchHistory(searchHistoryList);\n              /*\n              As we don't want our search history to be too long we will only ensure we have a max of 6 items,\n              so we will remove the last item in the array when a new one is added.\n              */\n\n              if (searchHistoryList.length > 6) {\n                while (searchHistoryList.length > 6) {\n                  searchHistoryList.pop();\n                }\n              } // We will then update out local storage.\n\n\n              window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n            } // Setting toggle to display searched card.\n\n\n            setToggle(true);\n          }\n        }\n      }\n    }\n\n    fetchAPI();\n  }, [urlForCardDetails, props.url, searchHistory]); // Stating our dependencies.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Pokemon Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), items.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-lg-6\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-body\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card bg-dark text-white\",\n            children: /*#__PURE__*/_jsxDEV(\"article\", {\n              style: styles.container,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"card-img-overlay\",\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  style: styles.h3,\n                  children: [\"Anime: \", item.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 111,\n                  columnNumber: 20\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"d-grid gap-2 d-sm-flex justify-content-md-center\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    style: styles.btn,\n                    id: \"button\",\n                    className: \"btn btn-primary btn-lg px-4 gap-3\",\n                    children: \"View More\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 113,\n                    columnNumber: 21\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    id: \"button\",\n                    className: \"btn btn-primary btn-lg px-4 gap-3\",\n                    children: \"Follow\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 114,\n                    columnNumber: 21\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 19\n              }, this)\n            }, item.cardId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Pokemon, \"1xyvXPykIgXfFRCVlfeZPRIl6mY=\");\n\n_c = Pokemon;\nexport default Pokemon;\nconst styles = {\n  container: {\n    alignContent: 'center',\n    padding: '10rem'\n  },\n  img: {\n    height: '30rem',\n    width: '35rem',\n    alignContent: 'center',\n    marginRight: '1rem'\n  },\n  myArticle: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  h3: {\n    textAlign: 'center',\n    marinTop: '1rem'\n  }\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Pokemon\");","map":{"version":3,"names":["React","useEffect","useState","Pokemon","props","toggle","setToggle","randomCardDetails","setRandomCardDetails","name","card_images","image_url","cardBack","desc","type","atk","def","attribute","level","race","urlForCardDetails","url","fetchAPI","errorMsg","document","querySelector","responseForCardDetails","cardInfo","apiCallResponse","fetch","e","innerText","cardJsonData","json","setCardDetails","searchHistoryList","searchHistory","cardExist","i","length","data","cardName","splice","unshift","cardImg","window","localStorage","setItem","JSON","stringify","setSearchHistory","pop","items","map","item","styles","container","h3","btn","cardId","alignContent","padding","img","height","width","marginRight","myArticle","display","flexDirection","textAlign","marinTop"],"sources":["/Users/lisaterlop/Desktop/Terlop_Lisa_WDD348_O/src/pages/Pokemon.js"],"sourcesContent":["import React, {useEffect, useState} from 'react'\nfunction Pokemon(props){\n// Setting state to true, this will determine which component set is loaded. Either from a specific search or a random card.\nconst [toggle, setToggle] = useState(true);\n\n// Setting up our state and leaving it empty when we load the page.\nconst [randomCardDetails, setRandomCardDetails] = useState({\n  name: 'Card Info',\n  card_images: [{image_url: cardBack}],\n  desc: 'N/A',\n  type: 'N/A',\n  atk: 'N/A',\n  def: 'N/A',\n  attribute: 'N/A',\n  level: 'N/A',\n  race: 'N/A',\n});\n\n// Setting the url for our API call based on the props being passed in from Search.js.\nlet urlForCardDetails = `https://db.ygoprodeck.com/api/v7/cardinfo.php?name=${props.url}`;\n\n     useEffect (() => {\n       async function fetchAPI() {\n        let errorMsg = document.querySelector('.errorMsg');\n        let responseForCardDetails;\n        let cardInfo;\n        let apiCallResponse;\n\n        // We will not call the API if the value is null like it is on the initial page load.\n        if (props.url !== null) {\n            // We will use a try catch finally when making a call to the API.\n            try {\n                responseForCardDetails = await fetch(urlForCardDetails);\n                apiCallResponse = true;\n            } catch (e) {\n                errorMsg.innerText = 'There is currently an issue with the API, try again later.';\n                apiCallResponse = false; // If there is an error we will set the state of statusCall to false.\n            } finally {\n                // Only if it comes back without an error we will go ahead and fetch the API data and set it in our card details state.\n                if(apiCallResponse === true) {\n\n                    responseForCardDetails = await fetch(urlForCardDetails);\n\n                    const cardJsonData = await responseForCardDetails.json();\n                    cardInfo = [];\n\n                    cardInfo = cardJsonData;\n\n                    setCardDetails(cardInfo);\n\n                    // Saving info to our history\n                    let searchHistoryList = searchHistory;\n\n                    let cardExist = false;\n\n                    /*\n                    If the card exists in our search history we will remove it from the array and put it at the beginning.\n                    We will then update out local storage.\n                     */\n                    for (let i = 0; i < searchHistoryList.length; i++) {\n                        if (cardInfo.data[0].name === searchHistoryList[i].cardName) {\n                            cardExist = true;\n                            searchHistoryList.splice(i, 1);\n                            searchHistoryList.unshift({cardName: cardInfo.data[0].name, cardImg: cardInfo.data[0].card_images[0].image_url});\n                            window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                        }\n                    }\n\n                    // If the card does not exist in our search history we will then add it to our search history.\n                    if (cardExist === false) {\n                        searchHistoryList.unshift({cardName: cardInfo.data[0].name, cardImg: cardInfo.data[0].card_images[0].image_url});\n                        setSearchHistory(searchHistoryList);\n\n                        /*\n                        As we don't want our search history to be too long we will only ensure we have a max of 6 items,\n                        so we will remove the last item in the array when a new one is added.\n                        */\n                        if (searchHistoryList.length > 6) {\n                            while (searchHistoryList.length > 6) {\n                                searchHistoryList.pop();\n                            }\n                        }\n\n                        // We will then update out local storage.\n                        window.localStorage.setItem('cardSearchHistory', JSON.stringify(searchHistory));\n                    }\n\n                    // Setting toggle to display searched card.\n                    setToggle(true);\n                }\n            }\n        }\n    }\n    fetchAPI();\n}, [urlForCardDetails, props.url, searchHistory]); // Stating our dependencies.\n\n       \n  return(\n    <div>\n      <p>Pokemon Cards</p>\n      {\n                items.map((item) => ( \n                  <div className=\"col-lg-6\">\n                    <div className=\"card\">\n                    <div className=\"card-body\">\n                    <div className=\"card bg-dark text-white\">\n                    \n                <article style={styles.container} key = { item.cardId } >\n                  {/* <img className=\"card-img\" src= {item.animeImg} alt=\"Anime\" style={styles.img}/>  */}\n                  <div className=\"card-img-overlay\"> \n                   <h3 style={styles.h3}>Anime: { item.name }</h3>\n                    <div className=\"d-grid gap-2 d-sm-flex justify-content-md-center\">\n                    <button style={styles.btn} id=\"button\" className=\"btn btn-primary btn-lg px-4 gap-3\">View More</button>\n                    <button id=\"button\" className=\"btn btn-primary btn-lg px-4 gap-3\">Follow</button>\n                    </div>\n                    </div>\n                    </article>\n                    </div>\n                    </div>\n                    </div>\n                    </div>\n                ))\n            }\n      \n    </div>\n    )\n  }\n   \nexport default Pokemon;\n\nconst styles = {\n  container: {\n    alignContent: 'center',\n    padding: '10rem'\n  },\n  img: {\n    height: '30rem',\n    width: '35rem',\n    alignContent: 'center',\n    marginRight: '1rem'\n       \n  },\n  myArticle: {\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  h3: {\n    textAlign: 'center',\n    marinTop: '1rem'\n  }\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAuB;EAAA;;EACvB;EACA,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,CAAC,IAAD,CAApC,CAFuB,CAIvB;;EACA,MAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4CN,QAAQ,CAAC;IACzDO,IAAI,EAAE,WADmD;IAEzDC,WAAW,EAAE,CAAC;MAACC,SAAS,EAAEC;IAAZ,CAAD,CAF4C;IAGzDC,IAAI,EAAE,KAHmD;IAIzDC,IAAI,EAAE,KAJmD;IAKzDC,GAAG,EAAE,KALoD;IAMzDC,GAAG,EAAE,KANoD;IAOzDC,SAAS,EAAE,KAP8C;IAQzDC,KAAK,EAAE,KARkD;IASzDC,IAAI,EAAE;EATmD,CAAD,CAA1D,CALuB,CAiBvB;;EACA,IAAIC,iBAAiB,GAAI,sDAAqDhB,KAAK,CAACiB,GAAI,EAAxF;EAEKpB,SAAS,CAAE,MAAM;IACf,eAAeqB,QAAf,GAA0B;MACzB,IAAIC,QAAQ,GAAGC,QAAQ,CAACC,aAAT,CAAuB,WAAvB,CAAf;MACA,IAAIC,sBAAJ;MACA,IAAIC,QAAJ;MACA,IAAIC,eAAJ,CAJyB,CAMzB;;MACA,IAAIxB,KAAK,CAACiB,GAAN,KAAc,IAAlB,EAAwB;QACpB;QACA,IAAI;UACAK,sBAAsB,GAAG,MAAMG,KAAK,CAACT,iBAAD,CAApC;UACAQ,eAAe,GAAG,IAAlB;QACH,CAHD,CAGE,OAAOE,CAAP,EAAU;UACRP,QAAQ,CAACQ,SAAT,GAAqB,4DAArB;UACAH,eAAe,GAAG,KAAlB,CAFQ,CAEiB;QAC5B,CAND,SAMU;UACN;UACA,IAAGA,eAAe,KAAK,IAAvB,EAA6B;YAEzBF,sBAAsB,GAAG,MAAMG,KAAK,CAACT,iBAAD,CAApC;YAEA,MAAMY,YAAY,GAAG,MAAMN,sBAAsB,CAACO,IAAvB,EAA3B;YACAN,QAAQ,GAAG,EAAX;YAEAA,QAAQ,GAAGK,YAAX;YAEAE,cAAc,CAACP,QAAD,CAAd,CATyB,CAWzB;;YACA,IAAIQ,iBAAiB,GAAGC,aAAxB;YAEA,IAAIC,SAAS,GAAG,KAAhB;YAEA;AACpB;AACA;AACA;;YACoB,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,iBAAiB,CAACI,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;cAC/C,IAAIX,QAAQ,CAACa,IAAT,CAAc,CAAd,EAAiB/B,IAAjB,KAA0B0B,iBAAiB,CAACG,CAAD,CAAjB,CAAqBG,QAAnD,EAA6D;gBACzDJ,SAAS,GAAG,IAAZ;gBACAF,iBAAiB,CAACO,MAAlB,CAAyBJ,CAAzB,EAA4B,CAA5B;gBACAH,iBAAiB,CAACQ,OAAlB,CAA0B;kBAACF,QAAQ,EAAEd,QAAQ,CAACa,IAAT,CAAc,CAAd,EAAiB/B,IAA5B;kBAAkCmC,OAAO,EAAEjB,QAAQ,CAACa,IAAT,CAAc,CAAd,EAAiB9B,WAAjB,CAA6B,CAA7B,EAAgCC;gBAA3E,CAA1B;gBACAkC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,mBAA5B,EAAiDC,IAAI,CAACC,SAAL,CAAeb,aAAf,CAAjD;cACH;YACJ,CA3BwB,CA6BzB;;;YACA,IAAIC,SAAS,KAAK,KAAlB,EAAyB;cACrBF,iBAAiB,CAACQ,OAAlB,CAA0B;gBAACF,QAAQ,EAAEd,QAAQ,CAACa,IAAT,CAAc,CAAd,EAAiB/B,IAA5B;gBAAkCmC,OAAO,EAAEjB,QAAQ,CAACa,IAAT,CAAc,CAAd,EAAiB9B,WAAjB,CAA6B,CAA7B,EAAgCC;cAA3E,CAA1B;cACAuC,gBAAgB,CAACf,iBAAD,CAAhB;cAEA;AACxB;AACA;AACA;;cACwB,IAAIA,iBAAiB,CAACI,MAAlB,GAA2B,CAA/B,EAAkC;gBAC9B,OAAOJ,iBAAiB,CAACI,MAAlB,GAA2B,CAAlC,EAAqC;kBACjCJ,iBAAiB,CAACgB,GAAlB;gBACH;cACJ,CAZoB,CAcrB;;;cACAN,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,mBAA5B,EAAiDC,IAAI,CAACC,SAAL,CAAeb,aAAf,CAAjD;YACH,CA9CwB,CAgDzB;;;YACA9B,SAAS,CAAC,IAAD,CAAT;UACH;QACJ;MACJ;IACJ;;IACDgB,QAAQ;EACX,CAzEa,EAyEX,CAACF,iBAAD,EAAoBhB,KAAK,CAACiB,GAA1B,EAA+Be,aAA/B,CAzEW,CAAT,CApBkB,CA6F4B;;EAGjD,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAGYgB,KAAK,CAACC,GAAN,CAAWC,IAAD,iBACR;MAAK,SAAS,EAAC,UAAf;MAAA,uBACE;QAAK,SAAS,EAAC,MAAf;QAAA,uBACA;UAAK,SAAS,EAAC,WAAf;UAAA,uBACA;YAAK,SAAS,EAAC,yBAAf;YAAA,uBAEJ;cAAS,KAAK,EAAEC,MAAM,CAACC,SAAvB;cAAA,uBAEE;gBAAK,SAAS,EAAC,kBAAf;gBAAA,wBACC;kBAAI,KAAK,EAAED,MAAM,CAACE,EAAlB;kBAAA,sBAA+BH,IAAI,CAAC7C,IAApC;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QADD,eAEE;kBAAK,SAAS,EAAC,kDAAf;kBAAA,wBACA;oBAAQ,KAAK,EAAE8C,MAAM,CAACG,GAAtB;oBAA2B,EAAE,EAAC,QAA9B;oBAAuC,SAAS,EAAC,mCAAjD;oBAAA;kBAAA;oBAAA;oBAAA;oBAAA;kBAAA,QADA,eAEA;oBAAQ,EAAE,EAAC,QAAX;oBAAoB,SAAS,EAAC,mCAA9B;oBAAA;kBAAA;oBAAA;oBAAA;oBAAA;kBAAA,QAFA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA,QAFF;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAFF,GAA0CJ,IAAI,CAACK,MAA/C;cAAA;cAAA;cAAA;YAAA;UAFI;YAAA;YAAA;YAAA;UAAA;QADA;UAAA;UAAA;UAAA;QAAA;MADA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,CAHZ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AA6BC;;GA7HMxD,O;;KAAAA,O;AA+HT,eAAeA,OAAf;AAEA,MAAMoD,MAAM,GAAG;EACbC,SAAS,EAAE;IACTI,YAAY,EAAE,QADL;IAETC,OAAO,EAAE;EAFA,CADE;EAKbC,GAAG,EAAE;IACHC,MAAM,EAAE,OADL;IAEHC,KAAK,EAAE,OAFJ;IAGHJ,YAAY,EAAE,QAHX;IAIHK,WAAW,EAAE;EAJV,CALQ;EAYbC,SAAS,EAAE;IACTC,OAAO,EAAE,MADA;IAETC,aAAa,EAAE;EAFN,CAZE;EAgBbX,EAAE,EAAE;IACFY,SAAS,EAAE,QADT;IAEFC,QAAQ,EAAE;EAFR;AAhBS,CAAf"},"metadata":{},"sourceType":"module"}